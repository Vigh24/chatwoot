FROM chatwoot/chatwoot:latest

ARG FRONTEND_URL ACTIVE_STORAGE_SERVICE DATABASE_URL PGHOST PGPORT DEFAULT_LOCALE INSTALLATION_ENV NODE_ENV RAILS_ENV REDIS_URL SECRET_KEY_BASE PORT

RUN apk add --no-cache multirun postgresql-client

# Remove database operations from build phase
# They will be executed during container startup

ENTRYPOINT ["multirun"]

# Create a startup script file directly in the Dockerfile
COPY <<-'EOT' /startup.sh
#!/bin/sh

# Function to check database connection with retries
check_db_connection() {
  echo "Checking database connection..."
  max_retries=30
  retries=0
  
  # Print environment variables for debugging (without exposing passwords)
  echo "Database connection parameters:"
  echo "PGHOST: $PGHOST"
  echo "PGPORT: $PGPORT"
  echo "DATABASE_URL is set: $(if [ -n "$DATABASE_URL" ]; then echo "yes"; else echo "no"; fi)"
  
  while [ $retries -lt $max_retries ]; do
    if pg_isready -h $PGHOST -p $PGPORT; then
      echo "Database connection successful!"
      return 0
    fi
    retries=$((retries+1))
    echo "Database connection attempt $retries/$max_retries failed, retrying in 5 seconds..."
    sleep 5
  done
  echo "Could not connect to database after $max_retries attempts"
  return 1
}

# Function to initialize database
init_database() {
  echo "Initializing database..."
  
  # Try to create database if it doesn't exist
  echo "Attempting to create database if it doesn't exist..."
  bundle exec rails db:create 2>/dev/null || echo "Database may already exist, continuing..."
  
  echo "Running chatwoot_prepare..."
  bundle exec rails db:chatwoot_prepare || return 1
  
  echo "Running schema load..."
  bundle exec rails db:schema:load || return 1
  
  echo "Running migrations..."
  bundle exec rails db:migrate || return 1
  
  echo "Verifying database setup..."
  # Check if installation_configs table exists
  if ! bundle exec rails runner "puts ActiveRecord::Base.connection.table_exists?('installation_configs')" | grep -q "true"; then
    echo "Error: installation_configs table does not exist after migrations"
    return 1
  fi
  
  echo "Database initialization completed successfully"
  return 0
}

# Main execution
if ! check_db_connection; then
  echo "Database connection failed. Exiting."
  exit 1
fi

if ! init_database; then
  echo "Database initialization failed. Exiting."
  exit 1
fi

echo "Starting Chatwoot services..."
exec multirun "bundle exec sidekiq -C config/sidekiq.yml" "bundle exec rails s -b 0.0.0.0 -p $PORT"
EOT

# Make the startup script executable and verify it exists
RUN chmod +x /startup.sh && \
    ls -la /startup.sh && \
    cat /startup.sh

CMD ["/startup.sh"]